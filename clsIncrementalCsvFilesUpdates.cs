/* Comment lines generated by ChatGPT
This method performs an incremental merge of two CSV files.
Method Signature:
This method takes four parameters:
csvMergeIn: The path to the input CSV file that serves as the base data.
csvUpdate: The path to the input CSV file that contains the updates to be merged.
csvMergeOut: The path to the output CSV file where the merged data will be written.
keyIndx: An integer representing the index of the column in the CSV files that serves as the key for merging.
Input File and Folder Checks:
The method first checks whether the input CSV files (csvMergeIn and csvUpdate) and the output folder (csvMergeOut) exist. 
If any of them does not exist, the method returns early, and no merging is performed.
Variable Initialization:
string uheader = string.Empty;: It initializes an empty string to store the header of the CSV files.
Dictionary<string, string> uKeys = new Dictionary<string, string>();: 
It initializes an empty dictionary to store keys from the update CSV file (csvUpdate).
List<string> orgData = ReadCSVfiles(csvMergeIn, ref uheader);: 
It reads the data from the base CSV file (csvMergeIn) using a helper method called ReadCSVfiles 
and stores the data in the orgData list. It also retrieves the header of the CSV file and stores it in uheader.
List<string> incData = ReadCSVfiles(csvUpdate, ref uheader, keyIndx, ref uKeys);:
It reads the data from the update CSV file (csvUpdate) using the same ReadCSVfiles method. 
Additionally, it extracts keys from the data and stores them in the uKeys dictionary.
Writing Header:
csvOutFile.WriteLine(uheader);: 
It writes the header (the first line of the CSV files) to the output CSV file (csvMergeOut).
Merging Data:
The code then iterates through each line in the orgData list (which contains the base data).
For each line, it extracts the key (specified by keyIndx) and checks if that key exists in the uKeys dictionary. 
If it does, the line is skipped, effectively excluding data that matches the keys in the update file.
After processing the base data, the code iterates through each line in the incData list (which contains the update data) 
and writes each line to the output CSV file (csvMergeOut).
Closing the Output File:
csvOutFile.Close();: It closes the StreamWriter to save the merged data to the output file.
MessageBox:
MessageBox.Show("Incremental merge process completed.");: 
Finally, a message box is displayed to indicate that the incremental merge process has been completed.

In summary, this method reads data from two CSV files, 
performs an incremental merge based on a specified key column, 
and writes the merged data to an output CSV file. 
The base data is updated with the data from the update file, 
excluding rows that have keys matching those in the update file.
 */
public void DoIncrementalUpdate(string csvMergeIn, string csvUpdate, 
    string csvMergeOut, int keyIndx)
{
    if (!IsFileExists(csvMergeIn)) return;
    if (!IsFileExists(csvUpdate)) return;
    if (!IsFolderExists(csvMergeOut)) return;
    //if the element ID exist in the csvUpdate file, exclude it from csvMergeIn
    //What not in the csvUpdate, write everything to csvMergeOut and append all from csvUpdate file.
    string uheader = string.Empty;
    Dictionary<string, string> uKeys = new Dictionary<string, string>();
    List<string> orgData = ReadCSVfiles(csvMergeIn, ref uheader);
    List<string> incData = ReadCSVfiles(csvUpdate, ref uheader, keyIndx, ref uKeys);
    StreamWriter csvOutFile = new StreamWriter(csvMergeOut);
    csvOutFile.WriteLine(uheader);
    foreach (string uLine in orgData)
    {
        string uKey = getItemTextAt(uLine, keyIndx, ',');
        if (uKeys.ContainsKey(uKey)) continue;
        csvOutFile.WriteLine(uLine);
    }
    foreach (string appData in incData)
        csvOutFile.WriteLine(appData);
    csvOutFile.Close();
    MessageBox.Show("Incremental merge process completed.");
}

//This method reads data from a CSV file, 
//stores each line in a list, extracts unique keys from the specified column, 
//and updates a dictionary (uKeys) with these unique keys. 
//The header of the CSV file is also stored in the header string if it's empty.
private List<string> ReadCSVfiles(string csvFile, ref string header,
    int keyIndx, ref Dictionary<string, string> uKeys)
{
    List<string> uItms = new List<string>();
    Dictionary<string, string> itmKeys = new Dictionary<string, string>();
    StreamReader csvIn = new StreamReader(csvFile);
    if (header == string.Empty)
        header = csvIn.ReadLine();
    while (!csvIn.EndOfStream)
    {
        string uLine = csvIn.ReadLine();
        uItms.Add(uLine);
        string uKey = getItemTextAt(uLine, keyIndx, ',');
        if (!itmKeys.ContainsKey(uKey))
            itmKeys.Add(uKey, uKey);
    }
    csvIn.Close();
    uKeys = itmKeys;
    return uItms;
}

//This method is useful for reading and processing the data lines from a CSV file 
//while optionally capturing and updating the header. 
//It ensures that empty lines are skipped during the reading process. 
//The caller of this method can then work with the list of data lines for further processing.
private List<string> ReadCSVfiles(string csvFile, ref string header)
{
    List<string> uItms = new List<string>();
    StreamReader csvIn = new StreamReader(csvFile);
    if (header == string.Empty)
        header = csvIn.ReadLine();
    while (!csvIn.EndOfStream)
    {
        string uLine = csvIn.ReadLine();
        if (uLine.Trim() != string.Empty)
            uItms.Add(uLine);
    }
    csvIn.Close();
    return uItms;
}

//This method is used to check whether a file exists at a given path. 
//If the file does not exist, it displays a message box and returns false. 
//If the file does exist, it simply returns true. 
//This can be helpful for validating file existence before performing file operations to avoid errors and unexpected behavior.
private bool IsFileExists(string csvFilePath)
{
    if (!File.Exists(csvFilePath))
    {
        MessageBox.Show("The file:" + csvFilePath + " does not exists");
        return false;
    }
    return true;
}

//This method is used to check whether the directory containing a specified file exists. 
//If the directory does not exist, it displays a message box and 
//returns false. If the directory exists, it returns true. 
//This can be helpful for validating the existence of directories 
//before performing file operations within those directories.
private bool IsFolderExists(string csvFilePath)
{
    FileInfo iFile = new FileInfo(csvFilePath);
    if (iFile == null) return false;
    if (!Directory.Exists(iFile.DirectoryName))
    {
        MessageBox.Show("The folder:" + iFile.DirectoryName + " does not exists");
        return false;
    }
    return true;
}

//This method is designed to split a text line into items using a specified delimiter 
//and retrieve a specific item at the specified index. 
//It is intended for use when working with delimited text data, 
//such as CSV files, where data is separated by a character (the delimiter) 
//and you want to extract specific fields or items from each line.
public static string getItemTextAt(string txtLine, int indx, char delimeter)
{
    string txtData = string.Empty;
    try
    {
        char[] c = new char[] { delimeter };
        string[] Itms = txtLine.Split(c);
        if (Itms.Length > indx)
            txtData = getTextValue(Itms[indx]);
    }
    catch { }
    return txtData;
}

//Returns the text value of given variable
public static string getTextValue(object d)
{
    if (d == null) return string.Empty;
    if (Convert.IsDBNull(d)) return string.Empty;

    return Convert.ToString(d).Trim();
}

/* Comment lines generated by ChatGPT version 3.5
This appends data rows from one CSV file to another CSV file 
while skipping a specified number of rows at the beginning of the source file. 
Here's how the method works:
This method takes three parameters:
csvIn: The path to the input CSV file from which data rows will be read.
csvOut: The path to the output CSV file to which the data rows will be appended.
skipRows: An integer representing the number of rows to skip at the beginning of the csvIn file before appending data rows.
In summary, this method allows you to append data rows from one CSV file to another 
while optionally skipping a specified number of rows at the beginning of the source file. 
It is often used to concatenate CSV files or add new data to an existing CSV file.
 */
public void AppendDataRows(string csvIn, string csvOut, int skipRows)
{
    StreamReader csvInFile = new StreamReader(csvIn);
    StreamWriter csvOutFile = new StreamWriter(csvOut, append: true);
    for (int i = 0; i < skipRows; i++)
        csvInFile.ReadLine();
    while (!csvInFile.EndOfStream)
        csvOutFile.WriteLine(csvInFile.ReadLine());
    csvOutFile.Close();
    csvInFile.Close();
}